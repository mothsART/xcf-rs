use xcf_rs::rle::rle_decompress;

#[test]
fn rle_decompression_four_pixels() {
    assert_eq!(
        rle_decompress(&vec![0, 158]),
        vec![158]
    );
    assert_eq!(
        rle_decompress(&vec![252, 222, 36, 36, 222]),
        vec![222, 36, 36, 222]
    );
    assert_eq!(
        rle_decompress(&vec![252, 158, 0, 255, 43]),
        vec![158, 0, 255, 43]
    );
    assert_eq!(
        rle_decompress(&vec![252, 0, 158, 5, 34]),
        vec![0, 158, 5, 34]
    );
}

#[test]
fn rle_decompression_specif_four_pixels() {
    assert_eq!(
        rle_decompress(&vec![1, 0, 254, 114, 121]),
        vec![0, 0, 114, 121]
    );
}

#[test]
fn rle_decompression_other_specif_four_pixels() {
    assert_eq!(
        rle_decompress(&vec![255, 183, 1, 209]),
        vec![183, 209, 209]
    );
}

#[test]
fn rle_decompression_12_pixels() {
    assert_eq!(
        rle_decompress(&vec![
            246, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54,
            1, 255
        ]),
        vec![
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54,
            255, 255
        ]
    );
    assert_eq!(
        rle_decompress(&vec![244, 0, 201, 255, 0, 0, 201, 255, 0, 0, 201, 255, 0]),
        vec![0, 201, 255, 0, 0, 201, 255, 0, 0, 201, 255, 0]
    );
    assert_eq!(
        rle_decompress(&vec![244, 0, 84, 255, 0, 0, 84, 255, 0, 0, 84, 255, 0]),
        vec![0, 84, 255, 0, 0, 84, 255, 0, 0, 84, 255, 0]
    );
}

#[test]
fn rle_decompression_12x12_pixels_one() {
    let mut raw = vec![];
    for _ in 0..18 {
        raw.extend_from_slice(&vec![0, 84, 255, 0, 0, 84, 255, 0]);
    }
    let mut result = vec![128, 0, 144];
    result.extend_from_slice(&raw);
    assert_eq!(
        rle_decompress(&result),
        raw
    );
}

#[test]
fn rle_decompression_short_diff() {
    let raw = vec![
        160, 160, 160, 160, 160,
        102, 102,
        188, 188, 188, 188,
        160, 160,
        188, 188, 188,
        160, 160, 160, 160, 160,
        188,
        160, 160, 160, 160, 160, 160, 160, 160, 160,
        215, 215, 215, 215,
        188, 46,
        102, 102,
        141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141
    ];
    assert_eq!(
        rle_decompress(&vec![
            4, 160,
            1, 102,
            3, 188,
            1, 160,
            2, 188,
            4, 160,
            255, 188,
            8, 160,
            3, 215,

            252, 188, 46, 102, 102,
            24, 141
        ]),
        raw
    );
}

#[test]
fn rle_decompression_12x12_pixels_two() {
    let mut raw = vec![];
    for _ in 0..18 {
        raw.extend_from_slice(&vec![0, 201, 255, 0, 0, 201, 255, 0]);
    }
    let mut result = vec![128, 0, 144];
    result.extend_from_slice(&raw);
    assert_eq!(
        rle_decompress(&result),
        raw
    );
}

#[test]
fn rle_decompression_12x12_pixels_three() {
    let mut raw = vec![];
    for _ in 0..18 {
        raw.extend_from_slice(&vec![0, 54, 255, 255, 0, 54, 255, 255]);
    }
    assert_eq!(
        rle_decompress(&vec![
            128, 0, 142,

            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54,

            1, 255
        ]),
        raw
    );
}

#[test]
fn rle_compression_7x1_diff_pixels() {
    assert_eq!(
        rle_decompress(&vec![2, 0, 255, 54, 2, 200]),
        vec![0, 0, 0, 54, 200, 200, 200]
    );
    assert_eq!(
        rle_decompress(&vec![2, 0, 255, 54, 2, 255]),
        vec![0, 0, 0, 54, 255, 255, 255]
    );
    assert_eq!(
        rle_decompress(&vec![2, 0, 252, 201, 255, 255, 0]),
        vec![0, 0, 0, 201, 255, 255, 0]
    );
    assert_eq!(
        rle_decompress(&vec![2, 0, 252, 84, 255, 255, 0]),
        vec![0, 0, 0, 84, 255, 255, 0]
    );
}

#[test]
fn rle_decompression_nine_pixels() {
    assert_eq!(
        rle_decompress(&vec![247, 222, 36, 36, 222, 36, 48, 0, 219, 0]),
        vec![222, 36, 36, 222, 36, 48, 0, 219, 0]
    );
}

#[test]
fn rle_decompression_9x3_pixels() {
    assert_eq!(
        rle_decompress(
            &vec![229, 158, 130, 222, 158, 130, 222, 158, 130, 222, 36, 222, 5, 36, 222, 5, 36, 222, 5, 0, 136, 248, 0, 136, 248, 0, 136, 248]
        ),
        vec![
                       158, 130, 222, 158, 130, 222, 158, 130, 222, 36, 222, 5, 36, 222, 5, 36, 222, 5, 0, 136, 248, 0, 136, 248, 0, 136, 248
        ]
    );

    let raw = vec![
        222, 36, 36, 222, 36, 36, 222, 36, 36, 222, 36, 48, 222, 36, 48, 222, 36, 48, 0, 219, 0, 0, 219, 0, 0, 219, 0
    ];
    assert_eq!(
        rle_decompress(&vec![
            229,
            222, 36, 36, 222, 36, 36, 222, 36, 36, 222, 36, 48, 222, 36, 48, 222, 36, 48, 0, 219, 0, 0, 219, 0, 0, 219, 0
        ]),
        raw
    );
}

#[test]
fn rle_decompression_9x9_pixels() {
    assert_eq!(
        rle_decompress(&vec![
            175,
            158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130,
            222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36,
            222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,
              0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136,
            248            
        ]),
        vec![
            158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130,
            222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36,
            222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,
              0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136,
            248
        ],
    );
}

#[test]
fn rle_decompression_9x1_same_pixels() {
    assert_eq!(
        rle_decompress(&vec![8, 36]),
        vec![
            36, 36, 36, 36, 36, 36, 36, 36, 36
        ]
    );
}

#[test]
fn rle_compression_9x15_pixels() {
    assert_eq!(
        rle_decompress(&vec![
            128, 0, 135,
            158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130,
            222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36,
            222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,
            0,   136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136,
            248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158,
            130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,
             36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248
        ]),
        vec![
            158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130,
            222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36,
            222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,
            0,   136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136,
            248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158,
            130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248, 158, 130, 222,
             36, 222,   5,   0, 136, 248, 158, 130, 222,  36, 222,   5,   0, 136, 248
        ]
    );
}

#[test]
fn rle_decompression_9x15_same_pixels() {
    assert_eq!(
        rle_decompress(&vec![127, 0, 135, 54]),
        vec![
            54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
            54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
            54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
            54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
            54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,

            54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
            54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54
        ]
    );
}

#[test]
fn rle_decompression_9x9_diff_pixels() {
    let raw = vec![
        254, 254, 254,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
    ];
    assert_eq!(
        rle_decompress(&vec![2, 254, 77, 255]),
        raw
    );
}

#[test]
fn rle_decompression_diff_chain_pixels() {
    let raw = vec![
        157, 160, 181, 203, 172, 161, 172, 182, 187, 158,
        165, 157, 158, 167, 156, 164, 156, 159, 184, 189,
        176, 184, 160, 182, 201, 195, 161, 158, 163, 160,
        156, 158, 172, 165, 157, 173, 199, 164, 159, 157,
        163, 163, 187, 183, 157, 158, 158, 176, 160, 163,
        157, 157, 156, 169, 172, 164, 156, 164, 183, 187,
        159, 177, 189, 162, 156, 165, 200, 169, 161, 165,
        164, 179, 194, 159, 176, 174, 168, 191, 163, 157,
        171, 186, 160, 170, 157, 156, 156, 168, 173, 176,
        156, 177, 182, 161, 157, 157, 171, 160, 159, 174,
        191, 158, 162, 158, 186, 171, 157, 157, 176, 166,
        158, 178, 167, 165, 156, 157, 156, 189, 167, 156,
        159, 187, 184, 168, 180, 161, 156, 165, 168, 157,
        169, 158, 156, 160, 192, 175, 160, 156, 160, 175,
        157, 158, 157, 158, 184, 191, 168, 178, 193, 194,
        185, 163, 169, 180, 176, 156, 156, 166, 194, 173,
        192, 168, 156, 159, 193, 196, 182, 164, 158, 178,
        157, 161, 162, 170, 169, 184, 175, 157, 161, 174,
        168, 156, 156, 173, 185, 167, 173, 157, 163, 156,
        171, 172, 165, 157, 163, 177, 184, 181, 156, 158,
        163, 176, 165, 193,

        156, 156, 156, 156, 156, 156, 156,
    ];
    assert_eq!(
        rle_decompress(&vec![
            128, 0, 204,

            157, 160, 181, 203, 172, 161, 172, 182, 187, 158,
            165, 157, 158, 167, 156, 164, 156, 159, 184, 189,
            176, 184, 160, 182, 201, 195, 161, 158, 163, 160,
            156, 158, 172, 165, 157, 173, 199, 164, 159, 157,
            163, 163, 187, 183, 157, 158, 158, 176, 160, 163,
            157, 157, 156, 169, 172, 164, 156, 164, 183, 187,
            159, 177, 189, 162, 156, 165, 200, 169, 161, 165,
            164, 179, 194, 159, 176, 174, 168, 191, 163, 157,
            171, 186, 160, 170, 157, 156, 156, 168, 173, 176,
            156, 177, 182, 161, 157, 157, 171, 160, 159, 174,
            191, 158, 162, 158, 186, 171, 157, 157, 176, 166,
            158, 178, 167, 165, 156, 157, 156, 189, 167, 156,
            159, 187, 184, 168, 180, 161, 156, 165, 168, 157,
            169, 158, 156, 160, 192, 175, 160, 156, 160, 175,
            157, 158, 157, 158, 184, 191, 168, 178, 193, 194,
            185, 163, 169, 180, 176, 156, 156, 166, 194, 173,
            192, 168, 156, 159, 193, 196, 182, 164, 158, 178,
            157, 161, 162, 170, 169, 184, 175, 157, 161, 174,
            168, 156, 156, 173, 185, 167, 173, 157, 163, 156,
            171, 172, 165, 157, 163, 177, 184, 181, 156, 158,
            163, 176, 165, 193,

            6, 156,
        ]),
        raw
    );
}

#[test]
fn rle_decompression_diff_pixels() {
    let raw = vec![
        254, 254, 254,

        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,

        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,

        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,

        254, 254, 254
    ];
    assert_eq!(
        rle_decompress(&vec![
            2, 254,
            127, 1, 44, 255,
            2, 254
        ]),
        raw
    );
}

#[test]
fn rle_decompression_diff2_pixels() {
    let mut raw = vec![254];
    for _ in 0..300 {
        raw.push(255);
    }
    raw.push(254);
    assert_eq!(
        rle_decompress(&vec![
            255, 254,
            127, 1, 44, 255,
            0, 254
        ]),
        raw
    );
}

#[test]
fn rle_decompression_iter_diff_pixels() {
    let mut raw = vec![200, 200, 200];
    let mut inc = 0;
    let mut nb_loop = 0;
    while nb_loop < 3 {
        inc += 1;
        raw.push(inc);
        if inc >= 100 {
            inc = 0;
            nb_loop += 1;
        }
    }
    raw.extend_from_slice(&vec![150, 150, 150]);
    assert_eq!(
        rle_decompress(&vec![
            2, 200,

            128, 1, 44,
            1,  2,  3,  4,  5,  6,  7,  8,  9,  10,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
            51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
            61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
            81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
            91, 92, 93, 94, 95, 96, 97, 98, 99, 100,

            1,  2,  3,  4,  5,  6,  7,  8,  9,  10,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
            51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
            61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
            81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
            91, 92, 93, 94, 95, 96, 97, 98, 99, 100,

            1,  2,  3,  4,  5,  6,  7,  8,  9,  10,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
            51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
            61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
            81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
            91, 92, 93, 94, 95, 96, 97, 98, 99, 100,

            2, 150
        ]),
        raw
    );
}

#[test]
fn rle_decompression_same_pixels_with_artifact() {
    let raw = vec![
        251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
        253, 253,
        251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
    ];
    assert_eq!(
        rle_decompress(&vec![
            10, 251,
            1, 253,
            10, 251
        ]),
        raw
    );
}

#[test]
fn rle_decompression_same_pixels() {
    let raw = vec![
        251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
        253, 253,
        251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
    ];
    assert_eq!(
        rle_decompress(&vec![
            10, 251,
            1, 253,
            10, 251
        ]),
        raw
    );
}

#[test]
fn rle_decompression_64x64_diff_pixels() {
    let mut raw = vec![];
    for _ in 0..424 {
        raw.push(255);
    }
    raw.push(0);
    raw.push(0);
    for _ in 0..3670 {
        raw.push(255);
    }
    assert_eq!(
        rle_decompress(&vec![
            127, 1, 168, 255,
            1, 0,
            127, 14, 86, 255
        ]),
        raw
    );
}

#[test]
fn rle_decompression_long_run_diff_pixels() {
    let mut raw = vec![];
    for _ in 0..128 {
        raw.push(255);
    }
    raw.push(0);
    raw.push(0);
    for _ in 0..128 {
        raw.push(44);
    }
    raw.push(222);
    raw.push(222);
    assert_eq!(
        rle_decompress(&vec![
            127, 0, 128, 255,
            1, 0,
            127, 0, 128, 44,
            1, 222
        ]),
        raw
    );
}

#[test]
fn rle_decompression_64x64_multi_diff_pixels() {
    let mut raw = vec![];
    for _ in 0..424 {
        raw.push(255);
    }
    raw.push(0);
    raw.push(0);
    for _ in 0..3668 {
        raw.push(255);
    }
    raw.push(0);
    raw.push(0);
    assert_eq!(
        rle_decompress(&vec![
            127, 1, 168, 255,
            1, 0,
            127, 14, 84, 255,
            1, 0
        ]),
        raw
    );
}

#[test]
fn rle_decompression_12x11_pixels() {
    let raw = vec![
        0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
        0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
        0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
        0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
        0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
        0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
        0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
        0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
        0, 54, 255, 255
    ];
    assert_eq!(
        rle_decompress(&vec![
            128, 0, 130,
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
            0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255, 0, 54, 255, 255,
            0, 54,
            01, 255
        ]),
        raw
    );
}

#[test]
fn rle_decompression_512x512_pixels() {
    let raw = vec![
        100,  78,  53,  40,  38,  42,  16,  13,  16,  25,  31,  30,  25,  25,   0,  0, 116, 101,  72,  55,
        43,   32,  19,  10,   8,  19,  30,  33,  28,  27,   0,   0,  77,  96,  92, 71,  45,  29,  32,  13,
         3,   12,  27,  32,  29,  31,   0,   0,  16,  68,  92,  72,  49,  47,  42, 18,   1,   8,  23,  31,
        29,   33,   0,   0,   0,   7,  44,  80,  74,  44,  58,  20,   4,  10,  14, 22,  30,  32,   0,   0,
         7,    0,  12,  52,  76,  75,  62,  29,   9,  11,  14,  18,  23,  33,   0,  0,   8,   6,   0,   2,
        38,   81,  74,  50,  18,   6,  13,  17,  18,  31,   0,   0,   8,  15,   4,  0,   1,  38,  77,  68,
        33,    5,  10,  19,  18,  25,   0,   0,  13,   6,   2,   2,   0,   0,  43, 67,  52,  17,   7,  13,
        16,   22,   0,   0,  16,  11,   8,   6,   1,   0,   0,  40,  58,  34,   9,  5,  12,  23,   0,   0,
        23,   27,  20,   3,   0,   5,   0,  10,  35,  38,  18,   6,  11,  17,   0,  0
    ];
    assert_eq!(
        rle_decompress(&vec![
            194,
            
            100, 78, 53, 40, 38, 42, 16, 13, 16, 25, 31, 30, 25, 25, 0, 0, 116, 101, 72, 55, 43, 32, 19, 10,
            8, 19, 30, 33, 28, 27, 0, 0, 77, 96, 92, 71, 45, 29, 32, 13, 3, 12, 27, 32, 29, 31, 0, 0, 16, 68,
            92, 72, 49, 47, 42, 18, 1, 8, 23, 31, 29, 33, 2, 0, 147, 7, 44, 80, 74, 44, 58, 20, 4, 10, 14, 22,
            30, 32, 0, 0, 7, 0, 12, 52, 76, 75, 62, 29, 9, 11, 14, 18, 23, 33, 0, 0, 8, 6, 0, 2, 38, 81, 74, 50,
            18, 6, 13, 17, 18, 31, 0, 0, 8, 15, 4, 0, 1, 38, 77, 68, 33, 5, 10, 19, 18, 25, 0, 0, 13, 6, 2, 2, 0,
            0, 43, 67, 52, 17, 7, 13, 16, 22, 0, 0, 16, 11, 8, 6, 1, 0, 0, 40, 58, 34, 9, 5, 12, 23, 0, 0, 23, 27,
            20, 3, 0, 5, 0, 10, 35, 38, 18, 6, 11, 17, 1, 0
        ]),
        raw
    );
}
